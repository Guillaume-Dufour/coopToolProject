@startuml

actor user
participant LoginController
participant UserFacade
participant AbstractDAOFactory
participant UserDAO
participant User
participant MailNotFound
participant UnmatchedPassword
database CoopToolDatabase

user -> LoginController : login()
activate LoginController
LoginController -> UserFacade  : getInstance()
UserFacade -> AbstractDAOFactory : getInstance()
activate UserFacade
activate AbstractDAOFactory
AbstractDAOFactory -> AbstractDAOFactory : getUserDAO()
AbstractDAOFactory -> UserDAO : getInstance()
deactivate AbstractDAOFactory
UserDAO --> AbstractDAOFactory : UserDAO
AbstractDAOFactory --> UserFacade : UserDAO
UserFacade --> LoginController : UserFacade
LoginController -> LoginController : getText()

LoginController -> UserFacade : login(mail : String, password : String)
UserFacade -> UserDAO : findUserByMail(mail : String)
activate UserDAO
UserDAO -> CoopToolDatabase : askForData
CoopToolDatabase --> UserDAO : result
create User
UserDAO -> User : new

alt FoundUser
    User --> UserDAO : User
    activate User
    UserDAO --> UserFacade : User
    deactivate UserDAO
    UserFacade -> User : checkPassword(password : String)
    alt GoodPassword
        User --> UserFacade : True
        deactivate User
        UserFacade --> LoginController : User
        LoginController -> UserFacade : setUser(user : User)
    else FalsePassword
        UserFacade -[hidden]> User
        activate User
        User --> UserFacade : False
        deactivate User
        create UnmatchedPassword
        UserFacade -> UnmatchedPassword : throw new UnmatchedPassword()
    end
else !FoundUser
    UserDAO -[hidden]> User
    activate User
    User -[hidden]> UserDAO
    activate UserDAO
    User --> UserDAO : Null
    deactivate User
    UserDAO --> UserFacade : Null
    deactivate UserDAO
    create MailNotFound
    UserFacade -> MailNotFound : throws new MailNotFound()
end

deactivate LoginController
deactivate UserFacade

@enduml